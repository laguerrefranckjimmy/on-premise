name: CI/CD Deploy

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: self-hosted

    env:
      K8S_NAMESPACE: learning01
      VM_IP: 10.0.2.15
      NIP_DOMAIN: nip.io

    steps:
      # 1️⃣ Checkout repository
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2️⃣ Setup Java & Node
      - name: Setup Java 11
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: 11

      - name: Setup Node.js 20
        uses: actions/setup-node@v3
        with:
          node-version: 20

      # 3️⃣ Setup Docker Buildx
      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      # 4️⃣ Build all Docker images locally
      - name: Build Docker Images (local only)
        run: |
          echo "🚀 Building all service images locally..."
          docker compose -f docker/docker-compose.build.yml build --no-cache

      # 5️⃣ Ensure Couchbase & Kafka containers exist and are running
      - name: Start Infra Services (only if not running)
        run: |
          echo "🔍 Checking Couchbase..."
          if [ "$(docker ps -q -f name=couchbase)" ]; then
            echo "✅ Couchbase already running."
          else
            if [ "$(docker ps -aq -f name=couchbase)" ]; then
              echo "⚠️ Couchbase container exists but stopped. Starting..."
              docker start couchbase
            else
              echo "🆕 Creating Couchbase container..."
              docker compose -f docker/docker-compose-services.yml up -d couchbase
            fi
          fi

          echo "🔍 Checking Kafka..."
          if [ "$(docker ps -q -f name=kafka)" ]; then
            echo "✅ Kafka already running."
          else
            if [ "$(docker ps -aq -f name=kafka)" ]; then
              echo "⚠️ Kafka container exists but stopped. Starting..."
              docker start kafka
            else
              echo "🆕 Creating Kafka container..."
              docker compose -f docker/docker-compose-services.yml up -d kafka
            fi
          fi

      # 6️⃣ Wait for Infra readiness
      - name: Wait for Couchbase & Kafka readiness
        run: |
          echo "Waiting for Couchbase to become healthy..."
          until [ "$(docker inspect --format='{{.State.Health.Status}}' couchbase 2>/dev/null)" == "healthy" ]; do
            echo "Couchbase not ready yet..."
            sleep 5
          done
          echo "✅ Couchbase is healthy."

          echo "Waiting for Kafka to become healthy..."
          until [ "$(docker inspect --format='{{.State.Health.Status}}' kafka 2>/dev/null)" == "healthy" ]; do
            echo "Kafka not ready yet..."
            sleep 5
          done
          echo "✅ Kafka is healthy."

      # 7️⃣ Deploy to Kubernetes
      - name: Deploy to Kubernetes
        run: |
          kubectl apply -f k8s/namespace.yaml
          kubectl apply -f k8s/deploy-spring.yaml
          kubectl apply -f k8s/deploy-vertx.yaml
          kubectl apply -f k8s/deploy-react.yaml

      # 8️⃣ Apply Ingress dynamically
      - name: Apply Ingress
        run: |
          sed -e "s/APP_HOST/app.${VM_IP}.${NIP_DOMAIN}/" \
              -e "s/API_HOST/api.${VM_IP}.${NIP_DOMAIN}/" \
              -e "s/VERTX_HOST/vertx.${VM_IP}.${NIP_DOMAIN}/" \
              k8s/ingress.yaml > k8s/ingress.tmp.yaml
          kubectl apply -f k8s/ingress.tmp.yaml

      # 9️⃣ Verify Kubernetes rollouts
      - name: Verify K8s Rollouts
        run: |
          kubectl -n $K8S_NAMESPACE rollout status deployment/spring-api
          kubectl -n $K8S_NAMESPACE rollout status deployment/vertx
          kubectl -n $K8S_NAMESPACE rollout status deployment/react

      # 🔟 Show Infra Status
      - name: Show Infra Status
        run: |
          echo "📦 Couchbase container status:"
          docker ps --filter "name=couchbase"
          echo "📦 Kafka container status:"
          docker ps --filter "name=kafka"

      # 1️⃣1️⃣ Print Access URLs
      - name: Print Access URLs
        run: |
          echo "🌐 React frontend: http://app.${VM_IP}.${NIP_DOMAIN}"
          echo "🌐 Spring Boot API: http://api.${VM_IP}.${NIP_DOMAIN}/spring/api/items"
          echo "🌐 Vert.x stream: http://vertx.${VM_IP}.${NIP_DOMAIN}/stream"
          echo "🧠 Couchbase UI: http://${VM_IP}:8091"
          echo "🔗 Kafka broker: ${VM_IP}:9092"
