name: CI/CD Deploy

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: self-hosted

    env:
      K8S_NAMESPACE: learning01
      VM_IP: 10.0.2.15
      NIP_DOMAIN: nip.io
      COMMIT_SHA: ${{ github.sha }}

    steps:
      # 1️⃣ Checkout repository
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2️⃣ Setup Java & Node
      - name: Setup Java 11
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: 11

      - name: Setup Node.js 20
        uses: actions/setup-node@v3
        with:
          node-version: 20

      # 3️⃣ Setup Docker Buildx
      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      # 4️⃣ Build only changed services & install dependencies
      - name: Build Changed Services & Dependencies
        run: |
          echo "🚀 Checking which services changed..."
          CHANGED_SERVICES=$(git diff --name-only ${{ github.sha }} ${{ github.event.before }} | grep -E '^(spring-api|vertx-service|react-app)/' | cut -d/ -f1 | sort -u)

          if [ -z "$CHANGED_SERVICES" ]; then
            echo "✅ No services changed. Skipping Docker build & dependency install."
            exit 0
          fi

          echo "🔨 Services changed: $CHANGED_SERVICES"

          for service in $CHANGED_SERVICES; do
            echo "🛠 Processing $service..."

            case $service in
              spring-api)
                echo "📦 Installing Maven dependencies for $service..."
                cd ../spring-api
                mvn -B -DskipTests dependency:resolve
                cd -
                ;;
              vertx-service)
                echo "📦 Installing Maven dependencies for $service..."
                cd ../vertx-service
                mvn -B -DskipTests dependency:resolve
                cd -
                ;;
              react-app)
                echo "📦 Installing Node.js dependencies for $service..."
                cd ../react-app
                npm ci
                cd -
                ;;
            esac

            IMAGE_NAME="${service}:${COMMIT_SHA}"
            echo "🛠 Building Docker image for $service -> $IMAGE_NAME..."
            docker compose -f docker/docker-compose.build.yml build --build-arg BUILDKIT_INLINE_CACHE=1 $service
            docker tag $service:latest $IMAGE_NAME
          done

      # 5️⃣ Remove old Docker images (except Couchbase & Kafka)
      - name: Cleanup old Docker images
        run: |
          echo "🧹 Removing old Docker images (except couchbase & kafka)..."
          for image in $(docker images --format "{{.Repository}}:{{.Tag}}" | grep -vE "^(couchbase|kafka)"); do
            echo "Deleting $image"
            docker rmi -f $image || true
          done

      # 6️⃣ Ensure Couchbase & Kafka containers exist and are running
      - name: Start Infra Services (Couchbase & Kafka)
        run: |
          for service in couchbase kafka; do
            if [ "$(docker ps -q -f name=$service)" ]; then
              echo "✅ $service already running."
            else
              if [ "$(docker ps -aq -f name=$service)" ]; then
                echo "⚠️ $service exists but stopped. Starting..."
                docker start $service
              else
                echo "🆕 Creating $service container..."
                docker compose -f docker/docker-compose-services.yml up -d $service
              fi
            fi
          done

      # 7️⃣ Wait for Couchbase & Kafka readiness
      - name: Wait for Couchbase & Kafka
        run: |
          echo "⏳ Waiting for Couchbase to become healthy..."
          MAX_RETRIES=30; COUNT=0; STATUS=""
          while [ "$COUNT" -lt "$MAX_RETRIES" ]; do
            STATUS=$(docker inspect --format='{{.State.Health.Status}}' couchbase 2>/dev/null || echo "unknown")
            [ "$STATUS" == "healthy" ] && break
            echo "Couchbase not ready yet... ($((COUNT+1))/$MAX_RETRIES)"
            sleep 5; COUNT=$((COUNT+1))
          done
          [ "$STATUS" != "healthy" ] && echo "❌ Couchbase failed." >&2 && docker logs couchbase >&2 && exit 1
          echo "✅ Couchbase is healthy."

          echo "⏳ Waiting for Kafka to become reachable..."
          MAX_RETRIES=30; COUNT=0
          while [ "$COUNT" -lt "$MAX_RETRIES" ]; do
            docker exec kafka bash -c "nc -z localhost 9092" && break
            echo "Kafka not ready yet... ($((COUNT+1))/$MAX_RETRIES)"
            sleep 5; COUNT=$((COUNT+1))
          done
          [ "$COUNT" -eq "$MAX_RETRIES" ] && echo "❌ Kafka failed." >&2 && docker logs kafka >&2 && exit 1
          echo "✅ Kafka is reachable."

      # 8️⃣ Deploy updated services to Kubernetes
      - name: Deploy to Kubernetes
        run: |
          kubectl apply -f k8s/namespace.yaml
          for service in spring-api vertx react-app; do
            if echo "$CHANGED_SERVICES" | grep -q "$service"; then
              echo "📦 Deploying updated $service..."
              kubectl apply -f k8s/deploy-$service.yaml
            else
              echo "⏭ Skipping $service deployment (no changes)"
            fi
          done

      # 9️⃣ Apply Ingress dynamically
      - name: Apply Ingress
        run: |
          sed -e "s/APP_HOST/app.${VM_IP}.${NIP_DOMAIN}/" \
              -e "s/API_HOST/api.${VM_IP}.${NIP_DOMAIN}/" \
              -e "s/VERTX_HOST/vertx.${VM_IP}.${NIP_DOMAIN}/" \
              k8s/ingress.yaml > k8s/ingress.tmp.yaml
          kubectl apply -f k8s/ingress.tmp.yaml

      # 🔟 Verify Kubernetes rollouts
      - name: Verify K8s Rollouts
        run: |
          kubectl -n $K8S_NAMESPACE rollout status deployment/spring-api
          kubectl -n $K8S_NAMESPACE rollout status deployment/vertx
          kubectl -n $K8S_NAMESPACE rollout status deployment/react

      # 1️⃣1️⃣ Show Infra Status
      - name: Show Infra Status
        run: |
          docker ps --filter "name=couchbase"
          docker ps --filter "name=kafka"

      # 1️⃣2️⃣ Print Access URLs
      - name: Print Access URLs
        run: |
          echo "🌐 React frontend: http://app.${VM_IP}.${NIP_DOMAIN}"
          echo "🌐 Spring Boot API: http://api.${VM_IP}.${NIP_DOMAIN}/spring/api/items"
          echo "🌐 Vert.x stream: http://vertx.${VM_IP}.${NIP_DOMAIN}/stream"
          echo "🧠 Couchbase UI: http://${VM_IP}:8091"
          echo "🔗 Kafka broker: ${VM_IP}:9092"
