name: CI/CD Deploy

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: self-hosted
    env:
      GHCR_USER: laguerrefranckjimmy
      GHCR_REGISTRY: ghcr.io/laguerrefranckjimmy
      K8S_NAMESPACE: learning01
      VM_IP: 10.0.2.15
      NIP_DOMAIN: nip.io

    steps:
      # 1Ô∏è‚É£ Checkout repository
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2Ô∏è‚É£ Setup Java & Node
      - name: Setup Java 11
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: 11

      - name: Setup Node.js 20
        uses: actions/setup-node@v3
        with:
          node-version: 20

      # 3Ô∏è‚É£ Setup Docker Buildx
      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      # 4Ô∏è‚É£ Login to GitHub Container Registry
      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # 5Ô∏è‚É£ Build & Push Docker Images
      - name: Build & Push Docker Images
        run: |
          docker compose -f docker/docker-compose.build.yml build
          docker compose -f docker/docker-compose.build.yml push

      # 6Ô∏è‚É£ Start Couchbase & Kafka
      - name: Start Infra Services
        run: docker compose -f docker/docker-compose-services.yml up -d

      # 7Ô∏è‚É£ Wait for Infra readiness via Docker healthchecks
      - name: Wait for Couchbase & Kafka
        run: |
          echo "Waiting for Couchbase..."
          until [ "$(docker inspect --format='{{.State.Health.Status}}' couchbase)" == "healthy" ]; do
            echo "Couchbase not ready..."
            sleep 5
          done
          echo "Couchbase ready!"

          echo "Waiting for Kafka..."
          until [ "$(docker inspect --format='{{.State.Health.Status}}' kafka)" == "healthy" ]; do
            echo "Kafka not ready..."
            sleep 5
          done
          echo "Kafka ready!"

      # 8Ô∏è‚É£ Deploy to Kubernetes
      - name: Deploy to Kubernetes
        run: |
          kubectl apply -f k8s/namespace.yaml
          kubectl apply -f k8s/deploy-spring.yaml
          kubectl apply -f k8s/deploy-vertx.yaml
          kubectl apply -f k8s/deploy-react.yaml

      # 9Ô∏è‚É£ Apply Ingress with dynamic hosts
      - name: Apply Ingress
        run: |
          sed -e "s/APP_HOST/app.${VM_IP}.${NIP_DOMAIN}/" \
              -e "s/API_HOST/api.${VM_IP}.${NIP_DOMAIN}/" \
              -e "s/VERTX_HOST/vertx.${VM_IP}.${NIP_DOMAIN}/" \
              k8s/ingress.yaml > k8s/ingress.tmp.yaml
          kubectl apply -f k8s/ingress.tmp.yaml

      # üîü Wait for Kubernetes rollouts
      - name: Verify K8s Rollouts
        run: |
          kubectl -n $K8S_NAMESPACE rollout status deployment/spring-api
          kubectl -n $K8S_NAMESPACE rollout status deployment/vertx
          kubectl -n $K8S_NAMESPACE rollout status deployment/react

      # 1Ô∏è‚É£1Ô∏è‚É£ Show Infra container status and logs
      - name: Show Infra Status
        run: |
          echo "Couchbase container status:"
          docker ps --filter "name=couchbase"
          echo "Kafka container status:"
          docker ps --filter "name=kafka"
          echo "Couchbase logs (last 10 lines):"
          docker logs --tail 10 couchbase
          echo "Kafka logs (last 10 lines):"
          docker logs --tail 10 kafka

      # 1Ô∏è‚É£2Ô∏è‚É£ Print Access URLs
      - name: Print Access URLs
        run: |
          echo "React frontend: http://app.${VM_IP}.${NIP_DOMAIN}"
          echo "Spring Boot API: http://api.${VM_IP}.${NIP_DOMAIN}/spring/api/items"
          echo "Vert.x stream: http://vertx.${VM_IP}.${NIP_DOMAIN}/stream"
          echo "Couchbase UI: http://${VM_IP}:8091"
          echo "Kafka broker: ${VM_IP}:9092"
