name: CI/CD Deploy

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: self-hosted

    env:
      K8S_NAMESPACE: learning01
      VM_IP: 10.0.2.15
      NIP_DOMAIN: nip.io

    steps:
      # 1️⃣ Checkout repository
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2️⃣ Setup Java & Node
      - name: Setup Java 11
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: 11

      - name: Setup Node.js 20
        uses: actions/setup-node@v3
        with:
          node-version: 20

      # 3️⃣ Cache Maven dependencies
      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      # 4️⃣ Cache Node modules
      - name: Cache Node.js dependencies
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      # 5️⃣ Setup Docker Buildx
      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      # 6️⃣ Remove old images (except Couchbase & Kafka)
      - name: Cleanup old Docker images
        run: |
          echo "🧹 Removing old Docker images..."
          docker images -q | while read IMG; do
            NAME=$(docker inspect --format='{{.Config.Image}}' $IMG 2>/dev/null || echo "")
            if [[ "$NAME" != "couchbase"* && "$NAME" != "confluentinc/cp-kafka"* ]]; then
              echo "Deleting $IMG ($NAME)"
              docker rmi -f $IMG || true
            fi
          done

      # 7️⃣ Build only updated Docker images locally
      - name: Build Docker Images (local only)
        run: |
          echo "🚀 Building updated service images..."
          docker compose -f docker/docker-compose.build.yml build --pull

      # 8️⃣ Start Couchbase & Kafka (if not running)
      - name: Start Infra Services (Couchbase & Kafka)
        run: |
          for SERVICE in couchbase kafka; do
            if [ "$(docker ps -q -f name=$SERVICE)" ]; then
              echo "✅ $SERVICE already running."
            else
              if [ "$(docker ps -aq -f name=$SERVICE)" ]; then
                echo "⚠️ $SERVICE exists but stopped. Starting..."
                docker start $SERVICE
              else
                echo "🆕 Creating $SERVICE container..."
                docker compose -f docker/docker-compose-services.yml up -d $SERVICE
              fi
            fi
          done

      # 9️⃣ Wait for Couchbase & Kafka readiness
      - name: Wait for Couchbase & Kafka readiness
        run: |
          # Couchbase
          echo "⏳ Waiting for Couchbase to become healthy..."
          MAX_RETRIES=30
          COUNT=0
          STATUS=""
          while [ "$COUNT" -lt "$MAX_RETRIES" ]; do
            STATUS=$(docker inspect --format='{{.State.Health.Status}}' couchbase 2>/dev/null || echo "unknown")
            if [ "$STATUS" == "healthy" ]; then
              echo "✅ Couchbase is healthy."
              break
            fi
            echo "Couchbase not ready yet... ($((COUNT+1))/$MAX_RETRIES)"
            sleep 5
            COUNT=$((COUNT + 1))
          done
          if [ "$STATUS" != "healthy" ]; then
            echo "❌ Couchbase failed to become healthy." >&2
            docker logs couchbase >&2
            exit 1
          fi

          # Kafka (port check)
          echo "⏳ Waiting for Kafka to become reachable..."
          MAX_RETRIES=30
          COUNT=0
          HOST=localhost
          PORT=9092
          while [ "$COUNT" -lt "$MAX_RETRIES" ]; do
            nc -z "$HOST" "$PORT" >/dev/null 2>&1
            if [ "$?" -eq 0 ]; then
              echo "✅ Kafka is reachable on $HOST:$PORT."
              break
            fi
            echo "Kafka not ready yet... ($((COUNT+1))/$MAX_RETRIES)"
            sleep 5
            COUNT=$((COUNT + 1))
          done
          if [ "$COUNT" -eq "$MAX_RETRIES" ]; then
            echo "❌ Kafka failed to start within timeout." >&2
            docker logs kafka --tail 50 >&2
            exit 1
          fi

      # 🔟 Deploy to Kubernetes (with sudo)
      - name: Deploy to Kubernetes
        run: |
          sudo kubectl apply -f k8s/namespace.yaml
          sudo kubectl apply -f k8s/deploy-spring.yaml
          sudo kubectl apply -f k8s/deploy-vertx.yaml
          sudo kubectl apply -f k8s/deploy-react.yaml

      # 1️⃣1️⃣ Apply Ingress (with sudo)
      - name: Apply Ingress
        run: |
          sed -e "s/APP_HOST/app.${VM_IP}.${NIP_DOMAIN}/" \
              -e "s/API_HOST/api.${VM_IP}.${NIP_DOMAIN}/" \
              -e "s/VERTX_HOST/vertx.${VM_IP}.${NIP_DOMAIN}/" \
              k8s/ingress.yaml > k8s/ingress.tmp.yaml
          sudo kubectl apply -f k8s/ingress.tmp.yaml

      # 1️⃣2️⃣ Verify Kubernetes rollouts (with sudo)
      - name: Verify K8s Rollouts
        run: |
          sudo kubectl -n $K8S_NAMESPACE rollout status deployment/spring-api
          sudo kubectl -n $K8S_NAMESPACE rollout status deployment/vertx
          sudo kubectl -n $K8S_NAMESPACE rollout status deployment/react

      # 1️⃣3️⃣ Show Infra Status
      - name: Show Infra Status
        run: |
          docker ps --filter "name=couchbase"
          docker ps --filter "name=kafka"

      # 1️⃣4️⃣ Print Access URLs
      - name: Print Access URLs
        run: |
          echo "🌐 React frontend: http://app.${VM_IP}.${NIP_DOMAIN}"
          echo "🌐 Spring Boot API: http://api.${VM_IP}.${NIP_DOMAIN}/spring/api/items"
          echo "🌐 Vert.x stream: http://vertx.${VM_IP}.${NIP_DOMAIN}/stream"
          echo "🧠 Couchbase UI: http://${VM_IP}:8091"
          echo "🔗 Kafka broker: ${VM_IP}:9092"
